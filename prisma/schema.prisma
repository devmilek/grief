// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  accounts           Account[]
  sessions           Session[]
  isTwoFactorEnabled Boolean   @default(false)

  recipes Recipe[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ServingType {
  SERVINGS
  PIECES
}

model Recipe {
  id              String     @unique @default(uuid())
  // slug            String     @unique
  name            String
  description     String?    @db.Text
  image           String?    @db.MediumText
  difficulty      Difficulty @default(EASY)
  preparationTime Int?
  published       Boolean    @default(false)

  servingType   ServingType @default(SERVINGS)
  servingAmount Int         @default(1)

  ingredients Ingredient[]
  steps       PreparationStep[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  occasions OccasionsOnRecipes[]
  cuisines  CuisinesOnRecipes[]
  diets     DietsOnRecipes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Image     Image[]

  @@index([categoryId])
  @@index([userId])
}

model PreparationStep {
  id          String  @unique @default(uuid())
  description String  @db.Text
  position    Int
  image       String? @db.Text

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@index([recipeId])
}

enum AdditionalQuantity {
  NULL
  FRAC1_2
  FRAC1_3
  FRAC1_4
  FRAC1_8
  FRAC2_3
  FRAC3_4
}

model Ingredient {
  id       String  @unique @default(uuid())
  quantity Int
  unit     String?
  name     String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@index([recipeId])
}

model Image {
  id   String  @unique @default(uuid())
  url  String  @db.Text
  alt  String?
  size Int
  name String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@index([recipeId])
}

model Category {
  id    String @unique @default(uuid())
  slug  String @unique
  name  String
  image String @db.Text

  recipes Recipe[]
}

model Occasion {
  id   String @unique @default(uuid())
  name String

  recipes OccasionsOnRecipes[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model OccasionsOnRecipes {
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String
  occassion   Occasion @relation(fields: [occassionId], references: [id], onDelete: Cascade)
  occassionId String

  @@id([recipeId, occassionId])
  @@index([occassionId])
  @@index([recipeId])
}

model Cuisine {
  id   String @unique @default(uuid())
  name String

  recipes CuisinesOnRecipes[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CuisinesOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  cuisines  Cuisine @relation(fields: [cuisineId], references: [id], onDelete: Cascade)
  cuisineId String

  @@id([recipeId, cuisineId])
  @@index([cuisineId])
  @@index([recipeId])
}

model Diet {
  id   String @unique @default(uuid())
  name String

  recipes DietsOnRecipes[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model DietsOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  diet   Diet   @relation(fields: [dietId], references: [id], onDelete: Cascade)
  dietId String

  @@id([recipeId, dietId])
  @@index([dietId])
  @@index([recipeId])
}
