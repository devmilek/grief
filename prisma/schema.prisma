// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String    @id @default(cuid())
  name          String    @db.TinyText
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  password      String?
  bio           String?   @db.Text
  accounts      Account[]

  recipes Recipe[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Recipe {
  id              String     @id @default(uuid())
  // slug            String     @unique
  name            String     @db.TinyText
  description     String     @db.Text
  image           String     @db.MediumText
  difficulty      Difficulty @default(EASY)
  preparationTime Int
  published       Boolean    @default(false)
  servings        Int        @default(1)

  ingredients Ingredient[]
  steps       PreparationStep[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  occasions OccasionsOnRecipes[]
  cuisines  CuisinesOnRecipes[]
  diets     DietsOnRecipes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
  @@fulltext([name])
}

model PreparationStep {
  id          String  @id @default(uuid())
  description String  @db.Text
  position    Int
  image       String? @db.Text

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@index([recipeId])
}

model Ingredient {
  id       String  @id @default(uuid())
  quantity Int?    @db.SmallInt
  unit     String?
  name     String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@index([recipeId])
}

model Image {
  id       String @id @default(uuid())
  url      String @db.Text
  publicId String @db.TinyText
}

model Category {
  id    String @id @default(uuid())
  slug  String @unique
  name  String
  image String @db.Text

  recipes Recipe[]

  @@index([slug])
}

model Occasion {
  id   String @id @default(uuid())
  name String
  slug String @unique

  recipes OccasionsOnRecipes[]

  @@index([slug])
}

model OccasionsOnRecipes {
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   String
  occasion   Occasion @relation(fields: [occasionId], references: [id], onDelete: Cascade)
  occasionId String

  @@id([recipeId, occasionId])
  @@index([occasionId])
  @@index([recipeId])
}

model Cuisine {
  id   String @id @default(uuid())
  name String
  slug String @unique

  recipes CuisinesOnRecipes[]

  @@index([slug])
}

model CuisinesOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  cuisines  Cuisine @relation(fields: [cuisineId], references: [id], onDelete: Cascade)
  cuisineId String

  @@id([recipeId, cuisineId])
  @@index([cuisineId])
  @@index([recipeId])
}

model Diet {
  id   String @id @default(uuid())
  name String
  slug String @unique

  recipes DietsOnRecipes[]

  @@index([slug])
}

model DietsOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  diet   Diet   @relation(fields: [dietId], references: [id], onDelete: Cascade)
  dietId String

  @@id([recipeId, dietId])
  @@index([dietId])
  @@index([recipeId])
}
