// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id     String  @unique @default(uuid())
  userId String  @unique
  name   String?
  email  String  @unique
  image  String?

  recipes Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ServingType {
  SERVINGS
  PIECES
}

model Recipe {
  id              String     @unique @default(uuid())
  // slug            String     @unique
  name            String
  description     String?    @db.Text
  images          Image[]
  difficulty      Difficulty @default(EASY)
  preparationTime Int?

  servingType   ServingType @default(SERVINGS)
  servingAmount Int         @default(1)

  ingredients Ingredient[]
  steps       PreparationStep[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  occasions OccasionsOnRecipes[]
  cuisines  CuisinesOnRecipes[]
  diets     DietsOnRecipes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([profileId])
}

model PreparationStep {
  id          String @unique @default(uuid())
  description String
  order       Int @default(0)
  image       String @db.Text

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@index([recipeId])
}

enum AdditionalQuantity {
  NULL
  FRAC1_2
  FRAC1_3
  FRAC1_4
  FRAC1_8
  FRAC2_3
  FRAC3_4
}

model Ingredient {
  id                 String              @unique @default(uuid())
  quantity           Int
  additionalQuantity AdditionalQuantity?
  name               String

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@index([recipeId])
}

model Image {
  id   String  @unique @default(uuid())
  url  String  @db.Text
  alt  String?
  size Int
  name String

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([recipeId])
}

model Category {
  id    String @unique @default(uuid())
  slug  String @unique
  name  String
  image String @db.Text

  recipes Recipe[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Occasion {
  id   String @unique @default(uuid())
  name String

  recipes OccasionsOnRecipes[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model OccasionsOnRecipes {
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    String
  occassion   Occasion @relation(fields: [occassionId], references: [id])
  occassionId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([recipeId, occassionId])
  @@index([occassionId])
  @@index([recipeId])
}

model Cuisine {
  id   String @unique @default(uuid())
  name String

  recipes CuisinesOnRecipes[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CuisinesOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  cuisines  Cuisine @relation(fields: [cuisineId], references: [id])
  cuisineId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([recipeId, cuisineId])
  @@index([cuisineId])
  @@index([recipeId])
}

model Diet {
  id   String @unique @default(uuid())
  name String

  recipes DietsOnRecipes[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model DietsOnRecipes {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  diet   Diet   @relation(fields: [dietId], references: [id])
  dietId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([recipeId, dietId])
  @@index([dietId])
  @@index([recipeId])
}
